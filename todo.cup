
package regExp;

/* Terminals (tokens returned by the scanner). */
terminal  ORD_CHAR, QUOTED_CHAR, DUP_COUNT;
terminal  BACKREF, L_ANCHOR, R_ANCHOR;
terminal  Back_open_paren,  Back_close_paren;
terminal  Back_open_brace,  Back_close_brace;
terminal  COLL_ELEM_SINGLE, COLL_ELEM_MULTI, META_CHAR;
terminal  Open_equal, Equal_close, Open_dot, Dot_close, Open_colon, Colon_close;
terminal  class_name;
terminal  ORD_CHAR, QUOTED_CHAR, DUP_COUNT;

/* Non terminals */
non terminal  basic_reg_exp, RE_expression;
non terminal  simple_RE, nondupl_RE, one_char_or_coll_elem_RE;
non terminal  RE_dupl_symbol;
non terminal  bracket_expression;
non terminal  matching_list, nonmatching_list, bracket_list, follow_list;
non terminal  expression_term, single_expression, range_expression;
non terminal  start_range, end_range;
non terminal  collating_symbol, equivalence_class, character_class;
non terminal  extended_reg_exp;
non terminal  ERE_branch, ERE_expression, one_char_or_coll_elem_ERE, ERE_dupl_symbol;

/* The grammar */
/* --------------------------------------------
   Basic Regular Expression
   --------------------------------------------
*/
basic_reg_exp  ::= RE_expression
                 | L_ANCHOR
                 | R_ANCHOR
                 | L_ANCHOR R_ANCHOR
                 | L_ANCHOR RE_expression
                 | RE_expression R_ANCHOR
                 | L_ANCHOR RE_expression R_ANCHOR
                 ;
RE_expression  ::= simple_RE
                 | RE_expression simple_RE
                 ;
simple_RE      ::= nondupl_RE
                 | nondupl_RE RE_dupl_symbol
                 ;
nondupl_RE     ::= one_char_or_coll_elem_RE
                 | Back_open_paren RE_expression Back_close_paren
                 | BACKREF
                 ;
one_char_or_coll_elem_RE ::= ORD_CHAR
                 | QUOTED_CHAR
                 | '.'
                 | bracket_expression
                 ;
RE_dupl_symbol ::= '*'
                 | Back_open_brace DUP_COUNT Back_close_brace
                 | Back_open_brace DUP_COUNT ',' Back_close_brace
                 | Back_open_brace DUP_COUNT ',' DUP_COUNT Back_close_brace
                 ;


/* --------------------------------------------
   Bracket Expression
   -------------------------------------------
*/
bracket_expression ::= '[' matching_list ']'
                     | '[' nonmatching_list ']'
                     ;
matching_list      ::= bracket_list
                     ;
nonmatching_list   ::= '^' bracket_list
                     ;
bracket_list       ::= follow_list
                     | follow_list '-'
                     ;
follow_list        ::= expression_term
                     | follow_list expression_term
                     ;
expression_term    ::= single_expression
                     | range_expression
                     ;
single_expression  ::= end_range
                     | character_class
                     | equivalence_class
                     ;
range_expression   ::= start_range end_range
                     | start_range '-'
                     ;
start_range        ::= end_range '-'
                     ;
end_range          ::= COLL_ELEM_SINGLE
                     | collating_symbol
                     ;
collating_symbol   ::= Open_dot COLL_ELEM_SINGLE Dot_close
                     | Open_dot COLL_ELEM_MULTI Dot_close
                     | Open_dot META_CHAR Dot_close
                     ;
equivalence_class  ::= Open_equal COLL_ELEM_SINGLE Equal_close
                     | Open_equal COLL_ELEM_MULTI Equal_close
                     ;
character_class    ::= Open_colon class_name Colon_close
                     ;

/* --------------------------------------------
   Extended Regular Expression
   --------------------------------------------
*/
extended_reg_exp   ::= ERE_branch
                     | extended_reg_exp '|' ERE_branch
                     ;
ERE_branch         ::= ERE_expression
                     | ERE_branch ERE_expression
                     ;
ERE_expression     ::= one_char_or_coll_elem_ERE
                     | '^'
                     | '$'
                     | '(' extended_reg_exp ')'
                     | ERE_expression ERE_dupl_symbol
                     ;
one_char_or_coll_elem_ERE ::= ORD_CHAR
                     | QUOTED_CHAR
                     | '.'
                     | bracket_expression
                     ;
ERE_dupl_symbol    ::= '*'
                     | '+'
                     | '?'
                     | '{' DUP_COUNT '}'
                     | '{' DUP_COUNT ',' '}'
                     | '{' DUP_COUNT ',' DUP_COUNT '}'
                     ;
