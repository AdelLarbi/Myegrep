
package regExp;

import automate.*;
import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileReader;

parser code 
{:
	public static Automate automateResultat = null;
	static final String lienDeFichier = "text";
	
	public Parser getParser(String pPath) throws Exception {
		InputStream is = null;
		is = new FileInputStream(pPath);
		return new Parser(new Lexer(is));
	}
	
	public Automate getAutomate() throws Exception {
		if (automateResultat == null) {
			this.parse();
		}				
			             
		return automateResultat;
	}
:}

/* Terminals (tokens returned by the scanner)._______________________________ */
/* --------------------------------------------------------------------------
 * Provided Terminals (http://pubs.opengroup.org/onlinepubs/9699919799/)
 * -------------------------------------------------------------------------- */            
   terminal  ORD_CHAR, QUOTED_CHAR; 
/* --------------------------------------------------------------------------
 * My Additional Terminals (characters not supported in Java Cup)
 * -------------------------------------------------------------------------- */
    terminal  OPEN_BRACKET;      /*   [   */
    terminal  CLOSE_BRACKET;     /*   ]   */
    terminal  CARET;             /*   ^   */
    terminal  MINUS;             /*   -   */
    terminal  VERTICAL_BAR;      /*   |   */
    terminal  DOLLAR;            /*   $   */
    terminal  OPEN_PARENTHESE;   /*   (   */
    terminal  CLOSE_PARENTHESE;  /*   )   */
    terminal  DOT;               /*   .   */
    terminal  ASTERISK;          /*   *   */
    terminal  PLUS;              /*   +   */
    terminal  QUESTION_MARK;     /*   ?   */
    terminal  OPEN_BRACE;        /*   {   */
    terminal  CLOSE_BRACE;       /*   }   */
    terminal  COMMA;             /*   ,   */    
/* End Terminals._____________________________________________________________*/



/* Non Terminals.____________________________________________________________ */
non terminal  bracket_expression; 
non terminal  matching_list, nonmatching_list, bracket_list, follow_list;
non terminal  expression_term, single_expression, range_expression;
non terminal  start_range, end_range;
non terminal  extended_reg_exp;
non terminal  ERE_branch, ERE_expression;
non terminal  one_char_or_coll_elem_ERE, ERE_dupl_symbol;
/* End Non Terminals.________________________________________________________ */



/* Start.____________________________________________________________________ */
start with  extended_reg_exp;
/* End Start.________________________________________________________________ */


/* The Grammar.______________________________________________________________ */
/* --------------------------------------------------------------------------
 * Extended Regular Expression
 * -------------------------------------------------------------------------- */
extended_reg_exp   ::=  ERE_branch:eb                                           {: 
																					System.out.println("---Debug cas[1]---");
																					Parser.automateResultat = (Automate)eb;
																					RESULT = Parser.automateResultat; 																				    
																				:}
                     |  extended_reg_exp:ere VERTICAL_BAR ERE_branch:eb         {: 
                     															    System.out.println("---Debug cas[2]---");
                     															    Automate automateTmp1 = (Automate)ere;
                                                        							Automate automateTmp2 = (Automate)eb;
                                                        							Parser.automateResultat = Automate.union(automateTmp1, automateTmp2);
                                                        							RESULT = Parser.automateResultat;                     															                        															                        															   
                     															:}
                     ;
ERE_branch         ::=  ERE_expression:ee                                       {: 
																				    System.out.println("---Debug cas[3]---"); 
																				    RESULT = ee;
																				:}
                     |  ERE_branch:eb ERE_expression:ee                         {: 
                     															    System.out.println("---Debug cas[4]---");
                     															    Automate automateTmp1 = (Automate)eb;
                                                        							Automate automateTmp2 = (Automate)ee;
                                                        							RESULT = Automate.concatination(automateTmp1, automateTmp2);
                     															:}
                     ;
ERE_expression     ::=  one_char_or_coll_elem_ERE:e                             {: 
																			        System.out.println("---Debug cas[5]---"); 
																			        RESULT = e;
																			    :}
                     |  CARET													{: 
                     																System.out.println("---Debug cas[6]---");
                     																RESULT = Automate.debutRegExp();
                     															:}
                     |  DOLLAR													{:  
                     																System.out.println("---Debug cas[7]---");
                     																RESULT = Automate.finRegExp();
                     															:}
                     |  OPEN_PARENTHESE extended_reg_exp:ere CLOSE_PARENTHESE   {: 
                     																System.out.println("---Debug cas[8]---");
                     																RESULT = ere; 
                     															:}
                     |  ERE_expression:er ERE_dupl_symbol:eds                   {: 	
                     																System.out.println("---Debug cas[9]---");
                     																RESULT = Automate.dupliquer((Automate)er,(Automate.SymboleDuplication)eds); 
                     															:}
                     ;
one_char_or_coll_elem_ERE ::=  ORD_CHAR:oc                                      {: 
																					System.out.println("---Debug cas[10]---");
																					RESULT = Automate.creer((String)oc);	
																				:}
                     |  QUOTED_CHAR:qc                                          {: 
                     																System.out.println("---Debug cas[11]---");
                     																String caractere = (((String)qc).substring(((String)qc).length()-1));
                     																RESULT = Automate.creer(caractere);
                     																                     																 	
                     															:}
                     |  DOT                                                     {: 
                     																System.out.println("---Debug cas[12]---");
                     																RESULT = Automate.point();
                     															:}
                     |  bracket_expression:be                                   {: 
                     																System.out.println("---Debug cas[13]---");
                     																RESULT = be; 
                     															:}
                     ;
ERE_dupl_symbol    ::=  ASTERISK                                                {: 
																					System.out.println("---Debug cas[14]---");
																					RESULT = Automate.SymboleDuplication.Etoile;
																				:}
                     |  PLUS                                                    {: 
                     																System.out.println("---Debug cas[15]---");
                     																RESULT = Automate.SymboleDuplication.Plus;
                     															:}
                     |  QUESTION_MARK                                           {: 
                     																System.out.println("---Debug cas[16]---");
                     																RESULT = Automate.SymboleDuplication.Interrogation;
                     															:}
                     |  OPEN_BRACE ORD_CHAR:oc CLOSE_BRACE                      {: 
                     																System.out.println("---Debug cas[17]---");
                     																Automate.setMin(Integer.parseInt((String)oc));
                                                         							RESULT = Automate.SymboleDuplication.Exact;                                                         							
                     															:}  	    
                     |  OPEN_BRACE ORD_CHAR:oc COMMA CLOSE_BRACE                {: 
                    																System.out.println("---Debug cas[18]---");
                    																Automate.setMin(Integer.parseInt((String)oc));
                                                         							RESULT = Automate.SymboleDuplication.Min;    
                    															:}
                     |  OPEN_BRACE ORD_CHAR:oc1 COMMA ORD_CHAR:oc2 CLOSE_BRACE  {: 
                     																System.out.println("---Debug cas[19]---");
                     																Automate.setMin(Integer.parseInt((String)oc1));
                     																Automate.setMax(Integer.parseInt((String)oc2));
                                                         							RESULT = Automate.SymboleDuplication.Min_Max;    
                     															:}
                     ;                     
/* --------------------------------------------------------------------------
 * Bracket Expression
 * -------------------------------------------------------------------------- */
bracket_expression ::=  OPEN_BRACKET matching_list:ml CLOSE_BRACKET             {: 
																					System.out.println("---Debug cas[20]---"); 
																					String listeCaractere = (String)ml;
                                                    								RESULT = Automate.creerListeMatching(listeCaractere);
																				:}
                     |  OPEN_BRACKET nonmatching_list:nl CLOSE_BRACKET          {: 
                     																System.out.println("---Debug cas[21]---");
                     																String listeCaractere = (String)nl;
                                                    								RESULT = Automate.creerListeNonMatching(listeCaractere); 
                     															:}
                     ;
matching_list      ::=  bracket_list:bl                                         {: 
																					System.out.println("---Debug cas[22]---"); 
																					RESULT = bl;
																				:}
                     ;
nonmatching_list   ::=  CARET bracket_list:bl                                   {: 
																					System.out.println("---Debug cas[23]---");
																					RESULT = bl; 
																				:}
                     ;
bracket_list       ::=  follow_list:fl                                          {: 	
																					System.out.println("---Debug cas[24]---");
																					RESULT = fl; 
																				:}
                     /*|  follow_list MINUS*/
                     ;
follow_list        ::=  expression_term:et                                      {: 
																					System.out.println("---Debug cas[25]---");
																					RESULT = et; 
																				:} 
                     |  follow_list:fl expression_term:et                       {: 
                     																System.out.println("---Debug cas[26]---");
                     																RESULT = (String)fl + (String)et; 
                     															:} 
                     ;
expression_term    ::=  single_expression:se                                    {: 
																					System.out.println("---Debug cas[27]---");
																					RESULT = se; 
																				:}
                     |  range_expression:re                                     {: 
                     																System.out.println("---Debug cas[28]---");
                     																RESULT = re; 
                     															:}
                     ;
single_expression  ::=  end_range:er 					                        {:
																					System.out.println("---Debug cas[29]---");
																					RESULT = er; 
																				:}
                     ;
range_expression   ::=  start_range:sr end_range:er                             {: 
																					System.out.println("---Debug cas[30]---");
																					char debut = ((String)sr).charAt(0);
                                                									String resultat = "";
                                                									for (int i = debut; i <= ((String)er).charAt(0); i++) {
                                                										resultat += (char)i;
                                                									}
                                                									RESULT = resultat; 
																				:}
                     |  start_range:sr MINUS                                    {: 
                     																System.out.println("---Debug cas[31]---");
                     																char debut = ((String)sr).charAt(0);
												                                    String resultat = "";
												                                    for (int i = debut; i < ((char)126); i++) {
												                                    	resultat += (char)i;
												                                    }
												                                    RESULT = resultat; 
                     															:}
                     ;
start_range        ::=  end_range:er MINUS                                      {: 
																					System.out.println("---Debug cas[32]---");
																					RESULT = er;  
																				:}
                     ;
end_range          ::=  ORD_CHAR:oc                                             {: 
																					System.out.println("---Debug cas[33]---");
																					RESULT = oc; 
																				:}
                     ;
/* End The Grammar.__________________________________________________________ */